/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MinSideRouteRouteImport } from './routes/min-side/route'
import { Route as LiftRouteRouteImport } from './routes/lift/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LiftIndexRouteImport } from './routes/lift/index'
import { Route as MinSideUserIdRouteImport } from './routes/min-side/$userId'
import { Route as LiftListIdRouteImport } from './routes/lift/$listId'
import { Route as BookBookIdRouteImport } from './routes/book/$bookId'
import { Route as authSignupIndexRouteImport } from './routes/(auth)/signup/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const MinSideRouteRoute = MinSideRouteRouteImport.update({
  id: '/min-side',
  path: '/min-side',
  getParentRoute: () => rootRouteImport,
} as any)
const LiftRouteRoute = LiftRouteRouteImport.update({
  id: '/lift',
  path: '/lift',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LiftIndexRoute = LiftIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LiftRouteRoute,
} as any)
const MinSideUserIdRoute = MinSideUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => MinSideRouteRoute,
} as any)
const LiftListIdRoute = LiftListIdRouteImport.update({
  id: '/$listId',
  path: '/$listId',
  getParentRoute: () => LiftRouteRoute,
} as any)
const BookBookIdRoute = BookBookIdRouteImport.update({
  id: '/book/$bookId',
  path: '/book/$bookId',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupIndexRoute = authSignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/lift': typeof LiftRouteRouteWithChildren
  '/min-side': typeof MinSideRouteRouteWithChildren
  '/book/$bookId': typeof BookBookIdRoute
  '/lift/$listId': typeof LiftListIdRoute
  '/min-side/$userId': typeof MinSideUserIdRoute
  '/lift/': typeof LiftIndexRoute
  '/login': typeof authLoginIndexRoute
  '/signup': typeof authSignupIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/min-side': typeof MinSideRouteRouteWithChildren
  '/book/$bookId': typeof BookBookIdRoute
  '/lift/$listId': typeof LiftListIdRoute
  '/min-side/$userId': typeof MinSideUserIdRoute
  '/lift': typeof LiftIndexRoute
  '/login': typeof authLoginIndexRoute
  '/signup': typeof authSignupIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/lift': typeof LiftRouteRouteWithChildren
  '/min-side': typeof MinSideRouteRouteWithChildren
  '/book/$bookId': typeof BookBookIdRoute
  '/lift/$listId': typeof LiftListIdRoute
  '/min-side/$userId': typeof MinSideUserIdRoute
  '/lift/': typeof LiftIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/signup/': typeof authSignupIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lift'
    | '/min-side'
    | '/book/$bookId'
    | '/lift/$listId'
    | '/min-side/$userId'
    | '/lift/'
    | '/login'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/min-side'
    | '/book/$bookId'
    | '/lift/$listId'
    | '/min-side/$userId'
    | '/lift'
    | '/login'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/lift'
    | '/min-side'
    | '/book/$bookId'
    | '/lift/$listId'
    | '/min-side/$userId'
    | '/lift/'
    | '/(auth)/login/'
    | '/(auth)/signup/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  LiftRouteRoute: typeof LiftRouteRouteWithChildren
  MinSideRouteRoute: typeof MinSideRouteRouteWithChildren
  BookBookIdRoute: typeof BookBookIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/min-side': {
      id: '/min-side'
      path: '/min-side'
      fullPath: '/min-side'
      preLoaderRoute: typeof MinSideRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lift': {
      id: '/lift'
      path: '/lift'
      fullPath: '/lift'
      preLoaderRoute: typeof LiftRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lift/': {
      id: '/lift/'
      path: '/'
      fullPath: '/lift/'
      preLoaderRoute: typeof LiftIndexRouteImport
      parentRoute: typeof LiftRouteRoute
    }
    '/min-side/$userId': {
      id: '/min-side/$userId'
      path: '/$userId'
      fullPath: '/min-side/$userId'
      preLoaderRoute: typeof MinSideUserIdRouteImport
      parentRoute: typeof MinSideRouteRoute
    }
    '/lift/$listId': {
      id: '/lift/$listId'
      path: '/$listId'
      fullPath: '/lift/$listId'
      preLoaderRoute: typeof LiftListIdRouteImport
      parentRoute: typeof LiftRouteRoute
    }
    '/book/$bookId': {
      id: '/book/$bookId'
      path: '/book/$bookId'
      fullPath: '/book/$bookId'
      preLoaderRoute: typeof BookBookIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup/': {
      id: '/(auth)/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
  authSignupIndexRoute: typeof authSignupIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
  authSignupIndexRoute: authSignupIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface LiftRouteRouteChildren {
  LiftListIdRoute: typeof LiftListIdRoute
  LiftIndexRoute: typeof LiftIndexRoute
}

const LiftRouteRouteChildren: LiftRouteRouteChildren = {
  LiftListIdRoute: LiftListIdRoute,
  LiftIndexRoute: LiftIndexRoute,
}

const LiftRouteRouteWithChildren = LiftRouteRoute._addFileChildren(
  LiftRouteRouteChildren,
)

interface MinSideRouteRouteChildren {
  MinSideUserIdRoute: typeof MinSideUserIdRoute
}

const MinSideRouteRouteChildren: MinSideRouteRouteChildren = {
  MinSideUserIdRoute: MinSideUserIdRoute,
}

const MinSideRouteRouteWithChildren = MinSideRouteRoute._addFileChildren(
  MinSideRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  LiftRouteRoute: LiftRouteRouteWithChildren,
  MinSideRouteRoute: MinSideRouteRouteWithChildren,
  BookBookIdRoute: BookBookIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
